import path from 'path';
import { fileService } from '#src/service/file-service';
import { config } from '#src/util/config';
export const tempFolderService = {
    cleanAll: async () => {
        await fileService.removeFolder(config().tempFolderPath);
        await tempFolderService.makeTempFolderIfNotExist();
    },
    flattenFolderByOneLevelAndRemoveIgnored: async () => {
        const contentList = await fileService.getFolderContent(config().tempFolderPath);
        await Promise.all(contentList.map(async (folder) => {
            const folderPath = path.resolve(config().tempFolderPath, folder);
            const ignoreFiles = await fileService.readIgnoreList(folderPath);
            await fileService.copy(folderPath, config().tempFolderPath, { ignore: ignoreFiles });
            await fileService.removeFolder(path.resolve(config().tempFolderPath, folder));
        }));
    },
    makeTempFolderIfNotExist: () => {
        return fileService.makeFolderIfNotExist(config().tempFolderPath);
    },
    // eslint-disable-next-line @typescript-eslint/require-await
    readIgnoreList: async () => {
        return fileService.readIgnoreList(config().tempFolderPath);
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcC1mb2xkZXItc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlL3RlbXAtZm9sZGVyLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFBO0FBRXZCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUN2RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFekMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUc7SUFDaEMsUUFBUSxFQUFFLEtBQUssSUFBbUIsRUFBRTtRQUNuQyxNQUFNLFdBQVcsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDdkQsTUFBTSxpQkFBaUIsQ0FBQyx3QkFBd0IsRUFBRSxDQUFBO0lBQ25ELENBQUM7SUFDRCx1Q0FBdUMsRUFBRSxLQUFLLElBQW1CLEVBQUU7UUFDbEUsTUFBTSxXQUFXLEdBQUcsTUFBTSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDL0UsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNoQixXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNoQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUNoRSxNQUFNLFdBQVcsR0FBRyxNQUFNLFdBQVcsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDaEUsTUFBTSxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQTtZQUNwRixNQUFNLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtRQUM5RSxDQUFDLENBQUMsQ0FDRixDQUFBO0lBQ0YsQ0FBQztJQUNELHdCQUF3QixFQUFFLEdBQWtCLEVBQUU7UUFDN0MsT0FBTyxXQUFXLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDakUsQ0FBQztJQUVELDREQUE0RDtJQUM1RCxjQUFjLEVBQUUsS0FBSyxJQUF1QixFQUFFO1FBQzdDLE9BQU8sV0FBVyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUMzRCxDQUFDO0NBQ0QsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmltcG9ydCB7IGZpbGVTZXJ2aWNlIH0gZnJvbSAnI3NyYy9zZXJ2aWNlL2ZpbGUtc2VydmljZSdcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJyNzcmMvdXRpbC9jb25maWcnXG5cbmV4cG9ydCBjb25zdCB0ZW1wRm9sZGVyU2VydmljZSA9IHtcblx0Y2xlYW5BbGw6IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0XHRhd2FpdCBmaWxlU2VydmljZS5yZW1vdmVGb2xkZXIoY29uZmlnKCkudGVtcEZvbGRlclBhdGgpXG5cdFx0YXdhaXQgdGVtcEZvbGRlclNlcnZpY2UubWFrZVRlbXBGb2xkZXJJZk5vdEV4aXN0KClcblx0fSxcblx0ZmxhdHRlbkZvbGRlckJ5T25lTGV2ZWxBbmRSZW1vdmVJZ25vcmVkOiBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdFx0Y29uc3QgY29udGVudExpc3QgPSBhd2FpdCBmaWxlU2VydmljZS5nZXRGb2xkZXJDb250ZW50KGNvbmZpZygpLnRlbXBGb2xkZXJQYXRoKVxuXHRcdGF3YWl0IFByb21pc2UuYWxsKFxuXHRcdFx0Y29udGVudExpc3QubWFwKGFzeW5jIChmb2xkZXIpID0+IHtcblx0XHRcdFx0Y29uc3QgZm9sZGVyUGF0aCA9IHBhdGgucmVzb2x2ZShjb25maWcoKS50ZW1wRm9sZGVyUGF0aCwgZm9sZGVyKVxuXHRcdFx0XHRjb25zdCBpZ25vcmVGaWxlcyA9IGF3YWl0IGZpbGVTZXJ2aWNlLnJlYWRJZ25vcmVMaXN0KGZvbGRlclBhdGgpXG5cdFx0XHRcdGF3YWl0IGZpbGVTZXJ2aWNlLmNvcHkoZm9sZGVyUGF0aCwgY29uZmlnKCkudGVtcEZvbGRlclBhdGgsIHsgaWdub3JlOiBpZ25vcmVGaWxlcyB9KVxuXHRcdFx0XHRhd2FpdCBmaWxlU2VydmljZS5yZW1vdmVGb2xkZXIocGF0aC5yZXNvbHZlKGNvbmZpZygpLnRlbXBGb2xkZXJQYXRoLCBmb2xkZXIpKVxuXHRcdFx0fSlcblx0XHQpXG5cdH0sXG5cdG1ha2VUZW1wRm9sZGVySWZOb3RFeGlzdDogKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuXHRcdHJldHVybiBmaWxlU2VydmljZS5tYWtlRm9sZGVySWZOb3RFeGlzdChjb25maWcoKS50ZW1wRm9sZGVyUGF0aClcblx0fSxcblxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3JlcXVpcmUtYXdhaXRcblx0cmVhZElnbm9yZUxpc3Q6IGFzeW5jICgpOiBQcm9taXNlPHN0cmluZ1tdPiA9PiB7XG5cdFx0cmV0dXJuIGZpbGVTZXJ2aWNlLnJlYWRJZ25vcmVMaXN0KGNvbmZpZygpLnRlbXBGb2xkZXJQYXRoKVxuXHR9LFxufVxuIl19