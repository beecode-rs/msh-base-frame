import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { config } from '#src/util/config';
export class GitService {
    _getAxiosHeader() {
        const { githubPersonAccessToken } = config();
        if (!githubPersonAccessToken) {
            return undefined;
        }
        return { Authorization: `token ${String(githubPersonAccessToken)}` };
    }
    async downloadZipToTempFolder() {
        const { gitZipUrl, tempFolderPath, templateZipName } = config();
        const axiosHeader = this._getAxiosHeader();
        const { data: stream } = await axios.get(gitZipUrl, { headers: axiosHeader, responseType: 'stream' });
        stream.pipe(fs.createWriteStream(path.resolve(tempFolderPath, `./${String(templateZipName)}`)));
        return new Promise((resolve, reject) => {
            stream.on('end', resolve);
            stream.on('error', reject);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0LXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmljZS9naXQtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDekIsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFBO0FBQ25CLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQTtBQUV2QixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFekMsTUFBTSxPQUFPLFVBQVU7SUFDWixlQUFlO1FBQ3hCLE1BQU0sRUFBRSx1QkFBdUIsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFBO1FBQzVDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1lBQzlCLE9BQU8sU0FBUyxDQUFBO1FBQ2pCLENBQUM7UUFFRCxPQUFPLEVBQUUsYUFBYSxFQUFFLFNBQVMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxDQUFBO0lBQ3JFLENBQUM7SUFFRCxLQUFLLENBQUMsdUJBQXVCO1FBQzVCLE1BQU0sRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFBO1FBQy9ELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQTtRQUMxQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ3JHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEtBQUssTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFL0YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN0QyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUN6QixNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUMzQixDQUFDLENBQUMsQ0FBQTtJQUNILENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJyNzcmMvdXRpbC9jb25maWcnXG5cbmV4cG9ydCBjbGFzcyBHaXRTZXJ2aWNlIHtcblx0cHJvdGVjdGVkIF9nZXRBeGlvc0hlYWRlcigpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgdW5kZWZpbmVkIHtcblx0XHRjb25zdCB7IGdpdGh1YlBlcnNvbkFjY2Vzc1Rva2VuIH0gPSBjb25maWcoKVxuXHRcdGlmICghZ2l0aHViUGVyc29uQWNjZXNzVG9rZW4pIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWRcblx0XHR9XG5cblx0XHRyZXR1cm4geyBBdXRob3JpemF0aW9uOiBgdG9rZW4gJHtTdHJpbmcoZ2l0aHViUGVyc29uQWNjZXNzVG9rZW4pfWAgfVxuXHR9XG5cblx0YXN5bmMgZG93bmxvYWRaaXBUb1RlbXBGb2xkZXIoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgeyBnaXRaaXBVcmwsIHRlbXBGb2xkZXJQYXRoLCB0ZW1wbGF0ZVppcE5hbWUgfSA9IGNvbmZpZygpXG5cdFx0Y29uc3QgYXhpb3NIZWFkZXIgPSB0aGlzLl9nZXRBeGlvc0hlYWRlcigpXG5cdFx0Y29uc3QgeyBkYXRhOiBzdHJlYW0gfSA9IGF3YWl0IGF4aW9zLmdldChnaXRaaXBVcmwsIHsgaGVhZGVyczogYXhpb3NIZWFkZXIsIHJlc3BvbnNlVHlwZTogJ3N0cmVhbScgfSlcblx0XHRzdHJlYW0ucGlwZShmcy5jcmVhdGVXcml0ZVN0cmVhbShwYXRoLnJlc29sdmUodGVtcEZvbGRlclBhdGgsIGAuLyR7U3RyaW5nKHRlbXBsYXRlWmlwTmFtZSl9YCkpKVxuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHN0cmVhbS5vbignZW5kJywgcmVzb2x2ZSlcblx0XHRcdHN0cmVhbS5vbignZXJyb3InLCByZWplY3QpXG5cdFx0fSlcblx0fVxufVxuIl19