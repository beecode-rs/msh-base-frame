"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileService = void 0;
const extract_zip_1 = __importDefault(require("extract-zip"));
const fs_1 = require("fs");
const glob_1 = __importDefault(require("glob"));
const recursive_copy_1 = __importDefault(require("recursive-copy"));
const logger_1 = require("src/util/logger");
exports.fileService = {
    makeFolderIfNotExist: async (folderPath) => {
        if (await fs_1.promises.stat(folderPath).catch(() => false))
            return;
        await fs_1.promises.mkdir(folderPath);
    },
    removeFile: async (filePath) => {
        if (!(await fs_1.promises.stat(filePath).catch(() => false)))
            return;
        await fs_1.promises.rm(filePath);
    },
    removeFolder: async (folderPath) => {
        if (!(await fs_1.promises.stat(folderPath).catch(() => false)))
            return;
        await fs_1.promises.rmdir(folderPath, { recursive: true });
    },
    unzip: async (src, dest) => {
        await extract_zip_1.default(src, { dir: dest });
    },
    getFolderContent: async (path) => {
        return fs_1.promises.readdir(path);
    },
    isDirectory: async (path) => {
        try {
            const stat = await fs_1.promises.stat(path);
            return stat.isDirectory();
        }
        catch (e) {
            logger_1.logger.error('fileService.isDirectory', { error: e });
            return false;
        }
    },
    isFile: async (path) => {
        try {
            const stat = await fs_1.promises.stat(path);
            return stat.isFile();
        }
        catch (e) {
            logger_1.logger.error('fileService.isFile', { error: e });
            return false;
        }
    },
    filterFiles: async (fileFolderList) => {
        const filtered = await Promise.all(fileFolderList.map(async (f) => ((await exports.fileService.isFile(f)) ? f : undefined)));
        return filtered.filter(Boolean);
    },
    copy: async (src, dest, options = { ignore: [] }) => {
        // TODO this is to complex
        const copyContentList = await new Promise((resolve, reject) => {
            glob_1.default('**/*', { cwd: src, dot: true, nodir: true, ignore: [...options.ignore, '.bfignore'] }, (err, files) => {
                if (err)
                    return reject(err);
                return resolve(files);
            });
        });
        await Promise.all(copyContentList.map((file) => recursive_copy_1.default(`${src}/${file}`, `${dest}/${file}`)));
    },
    readFile: async (filePath) => {
        return fs_1.promises.readFile(filePath, { encoding: 'utf-8' });
    },
    getRecurringFolderContent: async (path) => {
        if (!(await exports.fileService.isDirectory(path)))
            return [];
        const folderContent = (await exports.fileService.getFolderContent(path)).map((f) => `${path}/${f}`);
        const subFolderContents = await Promise.all(folderContent.map(exports.fileService.getRecurringFolderContent));
        return [...folderContent, ...subFolderContents.flat()];
    },
    readIgnoreList: async (path) => {
        try {
            const body = await exports.fileService.readFile(`${path}/.bfignore`);
            return body
                .split('\n')
                .map((v) => v.trim())
                .filter(Boolean);
        }
        catch (e) {
            logger_1.logger.error('fileService.readIgnoreList', { error: e });
            return [];
        }
    },
    writeToFile: async (filePath, data) => {
        await fs_1.promises.writeFile(filePath, data, 'utf-8');
    },
    copyFilesIfNotExists: async (src, dest) => {
        await recursive_copy_1.default(src, dest, { overwrite: false, dot: true });
    },
};
//# sourceMappingURL=data:application/json;base64,