import { singletonPattern } from '@beecode/msh-util/singleton/pattern';
import { promises as fs } from 'fs';
import Joi from 'joi';
import os from 'os';
import path from 'path';
import { constant } from '#src/util/constant';
import { logger } from '#src/util/logger';
import { validationUtil } from '#src/util/validation-util';
export const configSchema = Joi.object()
    .keys({
    githubPersonAccessToken: Joi.string().allow(null).empty([null, '']).optional(),
    gitZipUrl: Joi.string().required(),
    localTemplateFolder: Joi.string().allow(null).empty([null, '']).optional(),
    tempFolderPath: Joi.string().allow(null).empty([null, '']).required(),
    template: Joi.object().keys({ projectName: Joi.string().required() }).unknown(),
    templateZipName: Joi.string().required(),
})
    .required();
export class ConfigSetup {
    _configuration = undefined;
    get configuration() {
        return this._configuration;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async _getUserConfigIfExists() {
        try {
            const userConfigFileLocation = path.join(os.homedir(), '.base-frame.user.json');
            const userConfigContent = await fs.readFile(userConfigFileLocation, 'utf8');
            return JSON.parse(userConfigContent);
        }
        catch (_e) {
            return {};
        }
    }
    async initialize() {
        if (this._configuration !== undefined) {
            throw Error('Config already initialized');
        }
        const { configFilePath } = constant();
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        if (!(await fs.stat(configFilePath))) {
            throw Error(`Config file missing [${String(configFilePath)}]`);
        }
        const jsonContent = JSON.parse(await fs.readFile(configFilePath, 'utf8'));
        const userJsonContent = await this._getUserConfigIfExists();
        const defaultValues = {
            tempFolderPath: path.resolve(process.cwd(), './.base-frame-tmp/'),
            templateZipName: 'template.zip',
        };
        logger().debug('jsonContent', { jsonContent, userJsonContent });
        this._configuration = validationUtil.validate({ ...defaultValues, ...userJsonContent, ...jsonContent }, configSchema);
    }
}
export const configSetupSingleton = singletonPattern(() => {
    return new ConfigSetup();
});
export const config = () => {
    const conf = configSetupSingleton().configuration;
    if (!conf) {
        throw Error('Config not initialized');
    }
    return conf;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFBO0FBQ3RFLE9BQU8sRUFBRSxRQUFRLElBQUksRUFBRSxFQUFFLE1BQU0sSUFBSSxDQUFBO0FBQ25DLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQTtBQUNyQixPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUE7QUFDbkIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFBO0FBRXZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUM3QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDekMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBZ0IxRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBcUI7S0FDekQsSUFBSSxDQUFDO0lBQ0wsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDOUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDbEMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDMUUsY0FBYyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENB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bGV0b25QYXR0ZXJuIH0gZnJvbSAnQGJlZWNvZGUvbXNoLXV0aWwvc2luZ2xldG9uL3BhdHRlcm4nXG5pbXBvcnQgeyBwcm9taXNlcyBhcyBmcyB9IGZyb20gJ2ZzJ1xuaW1wb3J0IEpvaSBmcm9tICdqb2knXG5pbXBvcnQgb3MgZnJvbSAnb3MnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuXG5pbXBvcnQgeyBjb25zdGFudCB9IGZyb20gJyNzcmMvdXRpbC9jb25zdGFudCdcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJyNzcmMvdXRpbC9sb2dnZXInXG5pbXBvcnQgeyB2YWxpZGF0aW9uVXRpbCB9IGZyb20gJyNzcmMvdXRpbC92YWxpZGF0aW9uLXV0aWwnXG5cbmV4cG9ydCB0eXBlIENvbmZpZ3VyYXRpb25UZW1wbGF0ZVR5cGUgPSB7XG5cdHByb2plY3ROYW1lOiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgQ29uZmlndXJhdGlvblR5cGUgPSB7XG5cdHRlbXBsYXRlOiBDb25maWd1cmF0aW9uVGVtcGxhdGVUeXBlXG5cdGdpdFppcFVybDogc3RyaW5nXG5cdGdpdGh1YlBlcnNvbkFjY2Vzc1Rva2VuPzogc3RyaW5nXG5cdGxvY2FsVGVtcGxhdGVGb2xkZXI/OiBzdHJpbmdcblxuXHR0ZW1wRm9sZGVyUGF0aDogc3RyaW5nXG5cdHRlbXBsYXRlWmlwTmFtZTogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBjb25maWdTY2hlbWEgPSBKb2kub2JqZWN0PENvbmZpZ3VyYXRpb25UeXBlPigpXG5cdC5rZXlzKHtcblx0XHRnaXRodWJQZXJzb25BY2Nlc3NUb2tlbjogSm9pLnN0cmluZygpLmFsbG93KG51bGwpLmVtcHR5KFtudWxsLCAnJ10pLm9wdGlvbmFsKCksXG5cdFx0Z2l0WmlwVXJsOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcblx0XHRsb2NhbFRlbXBsYXRlRm9sZGVyOiBKb2kuc3RyaW5nKCkuYWxsb3cobnVsbCkuZW1wdHkoW251bGwsICcnXSkub3B0aW9uYWwoKSxcblx0XHR0ZW1wRm9sZGVyUGF0aDogSm9pLnN0cmluZygpLmFsbG93KG51bGwpLmVtcHR5KFtudWxsLCAnJ10pLnJlcXVpcmVkKCksXG5cdFx0dGVtcGxhdGU6IEpvaS5vYmplY3Q8Q29uZmlndXJhdGlvblRlbXBsYXRlVHlwZT4oKS5rZXlzKHsgcHJvamVjdE5hbWU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpIH0pLnVua25vd24oKSxcblx0XHR0ZW1wbGF0ZVppcE5hbWU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuXHR9KVxuXHQucmVxdWlyZWQoKVxuXG5leHBvcnQgY2xhc3MgQ29uZmlnU2V0dXAge1xuXHRwcm90ZWN0ZWQgX2NvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uVHlwZSA9IHVuZGVmaW5lZFxuXG5cdGdldCBjb25maWd1cmF0aW9uKCk6IENvbmZpZ3VyYXRpb25UeXBlIHwgdW5kZWZpbmVkIHtcblx0XHRyZXR1cm4gdGhpcy5fY29uZmlndXJhdGlvblxuXHR9XG5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblx0cHJvdGVjdGVkIGFzeW5jIF9nZXRVc2VyQ29uZmlnSWZFeGlzdHMoKTogUHJvbWlzZTxhbnk+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgdXNlckNvbmZpZ0ZpbGVMb2NhdGlvbiA9IHBhdGguam9pbihvcy5ob21lZGlyKCksICcuYmFzZS1mcmFtZS51c2VyLmpzb24nKVxuXHRcdFx0Y29uc3QgdXNlckNvbmZpZ0NvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZSh1c2VyQ29uZmlnRmlsZUxvY2F0aW9uLCAndXRmOCcpXG5cblx0XHRcdHJldHVybiBKU09OLnBhcnNlKHVzZXJDb25maWdDb250ZW50KVxuXHRcdH0gY2F0Y2ggKF9lKSB7XG5cdFx0XHRyZXR1cm4ge31cblx0XHR9XG5cdH1cblxuXHRhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGlmICh0aGlzLl9jb25maWd1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRocm93IEVycm9yKCdDb25maWcgYWxyZWFkeSBpbml0aWFsaXplZCcpXG5cdFx0fVxuXHRcdGNvbnN0IHsgY29uZmlnRmlsZVBhdGggfSA9IGNvbnN0YW50KClcblxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG5cdFx0aWYgKCEoYXdhaXQgZnMuc3RhdChjb25maWdGaWxlUGF0aCkpKSB7XG5cdFx0XHR0aHJvdyBFcnJvcihgQ29uZmlnIGZpbGUgbWlzc2luZyBbJHtTdHJpbmcoY29uZmlnRmlsZVBhdGgpfV1gKVxuXHRcdH1cblx0XHRjb25zdCBqc29uQ29udGVudCA9IEpTT04ucGFyc2UoYXdhaXQgZnMucmVhZEZpbGUoY29uZmlnRmlsZVBhdGgsICd1dGY4JykpXG5cdFx0Y29uc3QgdXNlckpzb25Db250ZW50ID0gYXdhaXQgdGhpcy5fZ2V0VXNlckNvbmZpZ0lmRXhpc3RzKClcblx0XHRjb25zdCBkZWZhdWx0VmFsdWVzID0ge1xuXHRcdFx0dGVtcEZvbGRlclBhdGg6IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnLi8uYmFzZS1mcmFtZS10bXAvJyksXG5cdFx0XHR0ZW1wbGF0ZVppcE5hbWU6ICd0ZW1wbGF0ZS56aXAnLFxuXHRcdH1cblx0XHRsb2dnZXIoKS5kZWJ1ZygnanNvbkNvbnRlbnQnLCB7IGpzb25Db250ZW50LCB1c2VySnNvbkNvbnRlbnQgfSlcblx0XHR0aGlzLl9jb25maWd1cmF0aW9uID0gdmFsaWRhdGlvblV0aWwudmFsaWRhdGUoeyAuLi5kZWZhdWx0VmFsdWVzLCAuLi51c2VySnNvbkNvbnRlbnQsIC4uLmpzb25Db250ZW50IH0sIGNvbmZpZ1NjaGVtYSlcblx0fVxufVxuXG5leHBvcnQgY29uc3QgY29uZmlnU2V0dXBTaW5nbGV0b24gPSBzaW5nbGV0b25QYXR0ZXJuKCgpID0+IHtcblx0cmV0dXJuIG5ldyBDb25maWdTZXR1cCgpXG59KVxuXG5leHBvcnQgY29uc3QgY29uZmlnID0gKCk6IENvbmZpZ3VyYXRpb25UeXBlID0+IHtcblx0Y29uc3QgY29uZiA9IGNvbmZpZ1NldHVwU2luZ2xldG9uKCkuY29uZmlndXJhdGlvblxuXHRpZiAoIWNvbmYpIHtcblx0XHR0aHJvdyBFcnJvcignQ29uZmlnIG5vdCBpbml0aWFsaXplZCcpXG5cdH1cblxuXHRyZXR1cm4gY29uZlxufVxuIl19