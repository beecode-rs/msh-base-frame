import { singletonPattern } from '@beecode/msh-util/singleton/pattern';
import { promises as fs } from 'fs';
import Joi from 'joi';
import os from 'os';
import path from 'path';
import { constant } from '#src/util/constant';
import { logger } from '#src/util/logger';
import { validationUtil } from '#src/util/validation-util';
export const configSchema = Joi.object()
    .keys({
    githubPersonAccessToken: Joi.string().allow(null).empty([null, '']).optional(),
    gitZipUrl: Joi.string().required(),
    localTemplateFolder: Joi.string().allow(null).empty([null, '']).optional(),
    tempFolderPath: Joi.string().allow(null).empty([null, '']).required(),
    template: Joi.object().keys({ projectName: Joi.string().required() }).unknown(),
    templateZipName: Joi.string().required(),
})
    .required();
export class ConfigSetup {
    _configuration = undefined;
    get configuration() {
        return this._configuration;
    }
    async _getUserConfigIfExists() {
        try {
            const userConfigFileLocation = path.join(os.homedir(), '.base-frame.user.json');
            const userConfigContent = await fs.readFile(userConfigFileLocation, 'utf8');
            return JSON.parse(userConfigContent);
        }
        catch (_e) {
            return {};
        }
    }
    async initialize() {
        if (this._configuration !== undefined) {
            throw Error('Config already initialized');
        }
        const { configFilePath } = constant();
        if (!(await fs.stat(configFilePath))) {
            throw Error(`Config file missing [${configFilePath}]`);
        }
        const jsonContent = JSON.parse(await fs.readFile(configFilePath, 'utf8'));
        const userJsonContent = await this._getUserConfigIfExists();
        const defaultValues = {
            tempFolderPath: path.resolve(process.cwd(), './.base-frame-tmp/'),
            templateZipName: 'template.zip',
        };
        logger().debug('jsonContent', { jsonContent, userJsonContent });
        this._configuration = validationUtil.validate({ ...defaultValues, ...userJsonContent, ...jsonContent }, configSchema);
    }
}
export const configSetupSingleton = singletonPattern(() => {
    return new ConfigSetup();
});
export const config = () => {
    const conf = configSetupSingleton().configuration;
    if (!conf) {
        throw Error('Config not initialized');
    }
    return conf;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFBO0FBQ3RFLE9BQU8sRUFBRSxRQUFRLElBQUksRUFBRSxFQUFFLE1BQU0sSUFBSSxDQUFBO0FBQ25DLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQTtBQUNyQixPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUE7QUFDbkIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFBO0FBRXZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUM3QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDekMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBZ0IxRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBcUI7S0FDekQsSUFBSSxDQUFDO0lBQ0wsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDOUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDbEMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDMUUsY0FBYyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQ3JFLFFBQVEsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUE2QixDQUFDLElBQUksQ0FBQyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRTtJQUMxRyxlQUFlLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtDQUN4QyxDQUFDO0tBQ0QsUUFBUSxFQUFFLENBQUE7QUFFWixNQUFNLE9BQU8sV0FBVztJQUNiLGNBQWMsR0FBdUIsU0FBUyxDQUFBO0lBRXhELElBQUksYUFBYTtRQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUE7SUFDM0IsQ0FBQztJQUVTLEtBQUssQ0FBQyxzQkFBc0I7UUFDckMsSUFBSSxDQUFDO1lBQ0osTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFBO1lBQy9FLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLE1BQU0sQ0FBQyxDQUFBO1lBRTNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3JDLENBQUM7UUFBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1lBQ2IsT0FBTyxFQUFFLENBQUE7UUFDVixDQUFDO0lBQ0YsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVO1FBQ2YsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3ZDLE1BQU0sS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUE7UUFDMUMsQ0FBQztRQUNELE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxRQUFRLEVBQUUsQ0FBQTtRQUVyQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3RDLE1BQU0sS0FBSyxDQUFDLHdCQUF3QixjQUFjLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZELENBQUM7UUFDRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtRQUN6RSxNQUFNLGVBQWUsR0FBRyxNQUFNLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFBO1FBQzNELE1BQU0sYUFBYSxHQUFHO1lBQ3JCLGNBQWMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxvQkFBb0IsQ0FBQztZQUNqRSxlQUFlLEVBQUUsY0FBYztTQUMvQixDQUFBO1FBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFBO1FBQy9ELElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsYUFBYSxFQUFFLEdBQUcsZUFBZSxFQUFFLEdBQUcsV0FBVyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDdEgsQ0FBQztDQUNEO0FBRUQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxFQUFFO0lBQ3pELE9BQU8sSUFBSSxXQUFXLEVBQUUsQ0FBQTtBQUN6QixDQUFDLENBQUMsQ0FBQTtBQUVGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFzQixFQUFFO0lBQzdDLE1BQU0sSUFBSSxHQUFHLG9CQUFvQixFQUFFLENBQUMsYUFBYSxDQUFBO0lBQ2pELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNYLE1BQU0sS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFBO0FBQ1osQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2luZ2xldG9uUGF0dGVybiB9IGZyb20gJ0BiZWVjb2RlL21zaC11dGlsL3NpbmdsZXRvbi9wYXR0ZXJuJ1xuaW1wb3J0IHsgcHJvbWlzZXMgYXMgZnMgfSBmcm9tICdmcydcbmltcG9ydCBKb2kgZnJvbSAnam9pJ1xuaW1wb3J0IG9zIGZyb20gJ29zJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcblxuaW1wb3J0IHsgY29uc3RhbnQgfSBmcm9tICcjc3JjL3V0aWwvY29uc3RhbnQnXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcjc3JjL3V0aWwvbG9nZ2VyJ1xuaW1wb3J0IHsgdmFsaWRhdGlvblV0aWwgfSBmcm9tICcjc3JjL3V0aWwvdmFsaWRhdGlvbi11dGlsJ1xuXG5leHBvcnQgdHlwZSBDb25maWd1cmF0aW9uVGVtcGxhdGVUeXBlID0ge1xuXHRwcm9qZWN0TmFtZTogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIENvbmZpZ3VyYXRpb25UeXBlID0ge1xuXHR0ZW1wbGF0ZTogQ29uZmlndXJhdGlvblRlbXBsYXRlVHlwZVxuXHRnaXRaaXBVcmw6IHN0cmluZ1xuXHRnaXRodWJQZXJzb25BY2Nlc3NUb2tlbj86IHN0cmluZ1xuXHRsb2NhbFRlbXBsYXRlRm9sZGVyPzogc3RyaW5nXG5cblx0dGVtcEZvbGRlclBhdGg6IHN0cmluZ1xuXHR0ZW1wbGF0ZVppcE5hbWU6IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3QgY29uZmlnU2NoZW1hID0gSm9pLm9iamVjdDxDb25maWd1cmF0aW9uVHlwZT4oKVxuXHQua2V5cyh7XG5cdFx0Z2l0aHViUGVyc29uQWNjZXNzVG9rZW46IEpvaS5zdHJpbmcoKS5hbGxvdyhudWxsKS5lbXB0eShbbnVsbCwgJyddKS5vcHRpb25hbCgpLFxuXHRcdGdpdFppcFVybDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG5cdFx0bG9jYWxUZW1wbGF0ZUZvbGRlcjogSm9pLnN0cmluZygpLmFsbG93KG51bGwpLmVtcHR5KFtudWxsLCAnJ10pLm9wdGlvbmFsKCksXG5cdFx0dGVtcEZvbGRlclBhdGg6IEpvaS5zdHJpbmcoKS5hbGxvdyhudWxsKS5lbXB0eShbbnVsbCwgJyddKS5yZXF1aXJlZCgpLFxuXHRcdHRlbXBsYXRlOiBKb2kub2JqZWN0PENvbmZpZ3VyYXRpb25UZW1wbGF0ZVR5cGU+KCkua2V5cyh7IHByb2plY3ROYW1lOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSB9KS51bmtub3duKCksXG5cdFx0dGVtcGxhdGVaaXBOYW1lOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcblx0fSlcblx0LnJlcXVpcmVkKClcblxuZXhwb3J0IGNsYXNzIENvbmZpZ1NldHVwIHtcblx0cHJvdGVjdGVkIF9jb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvblR5cGUgPSB1bmRlZmluZWRcblxuXHRnZXQgY29uZmlndXJhdGlvbigpOiBDb25maWd1cmF0aW9uVHlwZSB8IHVuZGVmaW5lZCB7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbmZpZ3VyYXRpb25cblx0fVxuXG5cdHByb3RlY3RlZCBhc3luYyBfZ2V0VXNlckNvbmZpZ0lmRXhpc3RzKCk6IFByb21pc2U8YW55PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHVzZXJDb25maWdGaWxlTG9jYXRpb24gPSBwYXRoLmpvaW4ob3MuaG9tZWRpcigpLCAnLmJhc2UtZnJhbWUudXNlci5qc29uJylcblx0XHRcdGNvbnN0IHVzZXJDb25maWdDb250ZW50ID0gYXdhaXQgZnMucmVhZEZpbGUodXNlckNvbmZpZ0ZpbGVMb2NhdGlvbiwgJ3V0ZjgnKVxuXG5cdFx0XHRyZXR1cm4gSlNPTi5wYXJzZSh1c2VyQ29uZmlnQ29udGVudClcblx0XHR9IGNhdGNoIChfZSkge1xuXHRcdFx0cmV0dXJuIHt9XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiAodGhpcy5fY29uZmlndXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aHJvdyBFcnJvcignQ29uZmlnIGFscmVhZHkgaW5pdGlhbGl6ZWQnKVxuXHRcdH1cblx0XHRjb25zdCB7IGNvbmZpZ0ZpbGVQYXRoIH0gPSBjb25zdGFudCgpXG5cblx0XHRpZiAoIShhd2FpdCBmcy5zdGF0KGNvbmZpZ0ZpbGVQYXRoKSkpIHtcblx0XHRcdHRocm93IEVycm9yKGBDb25maWcgZmlsZSBtaXNzaW5nIFske2NvbmZpZ0ZpbGVQYXRofV1gKVxuXHRcdH1cblx0XHRjb25zdCBqc29uQ29udGVudCA9IEpTT04ucGFyc2UoYXdhaXQgZnMucmVhZEZpbGUoY29uZmlnRmlsZVBhdGgsICd1dGY4JykpXG5cdFx0Y29uc3QgdXNlckpzb25Db250ZW50ID0gYXdhaXQgdGhpcy5fZ2V0VXNlckNvbmZpZ0lmRXhpc3RzKClcblx0XHRjb25zdCBkZWZhdWx0VmFsdWVzID0ge1xuXHRcdFx0dGVtcEZvbGRlclBhdGg6IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnLi8uYmFzZS1mcmFtZS10bXAvJyksXG5cdFx0XHR0ZW1wbGF0ZVppcE5hbWU6ICd0ZW1wbGF0ZS56aXAnLFxuXHRcdH1cblx0XHRsb2dnZXIoKS5kZWJ1ZygnanNvbkNvbnRlbnQnLCB7IGpzb25Db250ZW50LCB1c2VySnNvbkNvbnRlbnQgfSlcblx0XHR0aGlzLl9jb25maWd1cmF0aW9uID0gdmFsaWRhdGlvblV0aWwudmFsaWRhdGUoeyAuLi5kZWZhdWx0VmFsdWVzLCAuLi51c2VySnNvbkNvbnRlbnQsIC4uLmpzb25Db250ZW50IH0sIGNvbmZpZ1NjaGVtYSlcblx0fVxufVxuXG5leHBvcnQgY29uc3QgY29uZmlnU2V0dXBTaW5nbGV0b24gPSBzaW5nbGV0b25QYXR0ZXJuKCgpID0+IHtcblx0cmV0dXJuIG5ldyBDb25maWdTZXR1cCgpXG59KVxuXG5leHBvcnQgY29uc3QgY29uZmlnID0gKCk6IENvbmZpZ3VyYXRpb25UeXBlID0+IHtcblx0Y29uc3QgY29uZiA9IGNvbmZpZ1NldHVwU2luZ2xldG9uKCkuY29uZmlndXJhdGlvblxuXHRpZiAoIWNvbmYpIHtcblx0XHR0aHJvdyBFcnJvcignQ29uZmlnIG5vdCBpbml0aWFsaXplZCcpXG5cdH1cblxuXHRyZXR1cm4gY29uZlxufVxuIl19