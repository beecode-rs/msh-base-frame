import { singletonPattern } from '@beecode/msh-util/singleton/pattern';
import { promises as fs } from 'fs';
import Joi from 'joi';
import os from 'os';
import path from 'path';
import { constant } from '#src/util/constant';
import { logger } from '#src/util/logger';
import { validationUtil } from '#src/util/validation-util';
export const configSchema = Joi.object()
    .keys({
    githubPersonAccessToken: Joi.string().allow(null).empty([null, '']).optional(),
    gitZipUrl: Joi.string().required(),
    localTemplateFolder: Joi.string().allow(null).empty([null, '']).optional(),
    tempFolderPath: Joi.string().allow(null).empty([null, '']).required(),
    template: Joi.object().keys({ projectName: Joi.string().required() }).unknown(),
    templateZipName: Joi.string().required(),
})
    .required();
export class ConfigSetup {
    _configuration = undefined;
    get configuration() {
        return this._configuration;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async _getUserConfigIfExists() {
        try {
            const userConfigFileLocation = path.join(os.homedir(), '.base-frame.user.json');
            const userConfigContent = await fs.readFile(userConfigFileLocation, 'utf8');
            return JSON.parse(userConfigContent);
        }
        catch (_e) {
            return {};
        }
    }
    async initialize() {
        if (this._configuration !== undefined) {
            throw Error('Config already initialized');
        }
        const { configFilePath } = constant();
        if (!(await fs.stat(configFilePath))) {
            throw Error(`Config file missing [${configFilePath}]`);
        }
        const jsonContent = JSON.parse(await fs.readFile(configFilePath, 'utf8'));
        const userJsonContent = await this._getUserConfigIfExists();
        const defaultValues = {
            tempFolderPath: path.resolve(process.cwd(), './.base-frame-tmp/'),
            templateZipName: 'template.zip',
        };
        logger().debug('jsonContent', { jsonContent, userJsonContent });
        this._configuration = validationUtil.validate({ ...defaultValues, ...userJsonContent, ...jsonContent }, configSchema);
    }
}
export const configSetupSingleton = singletonPattern(() => {
    return new ConfigSetup();
});
export const config = () => {
    const conf = configSetupSingleton().configuration;
    if (!conf) {
        throw Error('Config not initialized');
    }
    return conf;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFBO0FBQ3RFLE9BQU8sRUFBRSxRQUFRLElBQUksRUFBRSxFQUFFLE1BQU0sSUFBSSxDQUFBO0FBQ25DLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQTtBQUNyQixPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUE7QUFDbkIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFBO0FBRXZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUM3QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDekMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBZ0IxRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBcUI7S0FDekQsSUFBSSxDQUFDO0lBQ0wsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDOUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDbEMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDMUUsY0FBYyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENB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ZS9tc2gtdXRpbC9zaW5nbGV0b24vcGF0dGVybidcbmltcG9ydCB7IHByb21pc2VzIGFzIGZzIH0gZnJvbSAnZnMnXG5pbXBvcnQgSm9pIGZyb20gJ2pvaSdcbmltcG9ydCBvcyBmcm9tICdvcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmltcG9ydCB7IGNvbnN0YW50IH0gZnJvbSAnI3NyYy91dGlsL2NvbnN0YW50J1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnI3NyYy91dGlsL2xvZ2dlcidcbmltcG9ydCB7IHZhbGlkYXRpb25VdGlsIH0gZnJvbSAnI3NyYy91dGlsL3ZhbGlkYXRpb24tdXRpbCdcblxuZXhwb3J0IHR5cGUgQ29uZmlndXJhdGlvblRlbXBsYXRlVHlwZSA9IHtcblx0cHJvamVjdE5hbWU6IHN0cmluZ1xufVxuXG5leHBvcnQgdHlwZSBDb25maWd1cmF0aW9uVHlwZSA9IHtcblx0dGVtcGxhdGU6IENvbmZpZ3VyYXRpb25UZW1wbGF0ZVR5cGVcblx0Z2l0WmlwVXJsOiBzdHJpbmdcblx0Z2l0aHViUGVyc29uQWNjZXNzVG9rZW4/OiBzdHJpbmdcblx0bG9jYWxUZW1wbGF0ZUZvbGRlcj86IHN0cmluZ1xuXG5cdHRlbXBGb2xkZXJQYXRoOiBzdHJpbmdcblx0dGVtcGxhdGVaaXBOYW1lOiBzdHJpbmdcbn1cblxuZXhwb3J0IGNvbnN0IGNvbmZpZ1NjaGVtYSA9IEpvaS5vYmplY3Q8Q29uZmlndXJhdGlvblR5cGU+KClcblx0LmtleXMoe1xuXHRcdGdpdGh1YlBlcnNvbkFjY2Vzc1Rva2VuOiBKb2kuc3RyaW5nKCkuYWxsb3cobnVsbCkuZW1wdHkoW251bGwsICcnXSkub3B0aW9uYWwoKSxcblx0XHRnaXRaaXBVcmw6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuXHRcdGxvY2FsVGVtcGxhdGVGb2xkZXI6IEpvaS5zdHJpbmcoKS5hbGxvdyhudWxsKS5lbXB0eShbbnVsbCwgJyddKS5vcHRpb25hbCgpLFxuXHRcdHRlbXBGb2xkZXJQYXRoOiBKb2kuc3RyaW5nKCkuYWxsb3cobnVsbCkuZW1wdHkoW251bGwsICcnXSkucmVxdWlyZWQoKSxcblx0XHR0ZW1wbGF0ZTogSm9pLm9iamVjdDxDb25maWd1cmF0aW9uVGVtcGxhdGVUeXBlPigpLmtleXMoeyBwcm9qZWN0TmFtZTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCkgfSkudW5rbm93bigpLFxuXHRcdHRlbXBsYXRlWmlwTmFtZTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG5cdH0pXG5cdC5yZXF1aXJlZCgpXG5cbmV4cG9ydCBjbGFzcyBDb25maWdTZXR1cCB7XG5cdHByb3RlY3RlZCBfY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb25UeXBlID0gdW5kZWZpbmVkXG5cblx0Z2V0IGNvbmZpZ3VyYXRpb24oKTogQ29uZmlndXJhdGlvblR5cGUgfCB1bmRlZmluZWQge1xuXHRcdHJldHVybiB0aGlzLl9jb25maWd1cmF0aW9uXG5cdH1cblxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuXHRwcm90ZWN0ZWQgYXN5bmMgX2dldFVzZXJDb25maWdJZkV4aXN0cygpOiBQcm9taXNlPGFueT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB1c2VyQ29uZmlnRmlsZUxvY2F0aW9uID0gcGF0aC5qb2luKG9zLmhvbWVkaXIoKSwgJy5iYXNlLWZyYW1lLnVzZXIuanNvbicpXG5cdFx0XHRjb25zdCB1c2VyQ29uZmlnQ29udGVudCA9IGF3YWl0IGZzLnJlYWRGaWxlKHVzZXJDb25maWdGaWxlTG9jYXRpb24sICd1dGY4JylcblxuXHRcdFx0cmV0dXJuIEpTT04ucGFyc2UodXNlckNvbmZpZ0NvbnRlbnQpXG5cdFx0fSBjYXRjaCAoX2UpIHtcblx0XHRcdHJldHVybiB7fVxuXHRcdH1cblx0fVxuXG5cdGFzeW5jIGluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0aWYgKHRoaXMuX2NvbmZpZ3VyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0NvbmZpZyBhbHJlYWR5IGluaXRpYWxpemVkJylcblx0XHR9XG5cdFx0Y29uc3QgeyBjb25maWdGaWxlUGF0aCB9ID0gY29uc3RhbnQoKVxuXG5cdFx0aWYgKCEoYXdhaXQgZnMuc3RhdChjb25maWdGaWxlUGF0aCkpKSB7XG5cdFx0XHR0aHJvdyBFcnJvcihgQ29uZmlnIGZpbGUgbWlzc2luZyBbJHtjb25maWdGaWxlUGF0aH1dYClcblx0XHR9XG5cdFx0Y29uc3QganNvbkNvbnRlbnQgPSBKU09OLnBhcnNlKGF3YWl0IGZzLnJlYWRGaWxlKGNvbmZpZ0ZpbGVQYXRoLCAndXRmOCcpKVxuXHRcdGNvbnN0IHVzZXJKc29uQ29udGVudCA9IGF3YWl0IHRoaXMuX2dldFVzZXJDb25maWdJZkV4aXN0cygpXG5cdFx0Y29uc3QgZGVmYXVsdFZhbHVlcyA9IHtcblx0XHRcdHRlbXBGb2xkZXJQYXRoOiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJy4vLmJhc2UtZnJhbWUtdG1wLycpLFxuXHRcdFx0dGVtcGxhdGVaaXBOYW1lOiAndGVtcGxhdGUuemlwJyxcblx0XHR9XG5cdFx0bG9nZ2VyKCkuZGVidWcoJ2pzb25Db250ZW50JywgeyBqc29uQ29udGVudCwgdXNlckpzb25Db250ZW50IH0pXG5cdFx0dGhpcy5fY29uZmlndXJhdGlvbiA9IHZhbGlkYXRpb25VdGlsLnZhbGlkYXRlKHsgLi4uZGVmYXVsdFZhbHVlcywgLi4udXNlckpzb25Db250ZW50LCAuLi5qc29uQ29udGVudCB9LCBjb25maWdTY2hlbWEpXG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGNvbmZpZ1NldHVwU2luZ2xldG9uID0gc2luZ2xldG9uUGF0dGVybigoKSA9PiB7XG5cdHJldHVybiBuZXcgQ29uZmlnU2V0dXAoKVxufSlcblxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9ICgpOiBDb25maWd1cmF0aW9uVHlwZSA9PiB7XG5cdGNvbnN0IGNvbmYgPSBjb25maWdTZXR1cFNpbmdsZXRvbigpLmNvbmZpZ3VyYXRpb25cblx0aWYgKCFjb25mKSB7XG5cdFx0dGhyb3cgRXJyb3IoJ0NvbmZpZyBub3QgaW5pdGlhbGl6ZWQnKVxuXHR9XG5cblx0cmV0dXJuIGNvbmZcbn1cbiJdfQ==