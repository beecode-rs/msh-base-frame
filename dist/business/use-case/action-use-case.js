import { fetchTemplateService } from '#src/business/service/fetch-template/service';
import { TemplateFolderService } from '#src/business/service/template-folder-service';
import { TemplatingService } from '#src/business/service/templating-service';
import { FileAdapter } from '#src/lib/file-adapter';
import { config } from '#src/util/config';
import { logger } from '#src/util/logger';
export const actionUseCase = {
    clone: async () => {
        await new TemplateFolderService().cleanAll();
        const { template: { subFolderLocation, localDestinationFolder, fetchStrategy }, } = config();
        await fetchTemplateService.getStrategy(fetchStrategy).fetch();
        if (subFolderLocation) {
            await new TemplateFolderService().promoteSubfolderToRoot({ rootFolderPath: localDestinationFolder, subFolderLocation });
        }
        const fileAdapter = new FileAdapter();
        const contentList = await fileAdapter.getRecurringFolderContent({ folderPath: localDestinationFolder });
        const files = await fileAdapter.filterFiles({ fileFolderPathList: contentList });
        const templateService = new TemplatingService();
        await Promise.all(files.map((filePath) => {
            return templateService.replaceFileWithRenderedTemplate({ filePath });
        }));
        try {
            // TODO create a strategy for override
            if (!config().template.forceOverride) {
                await fileAdapter.copyAndOverride({ destinationFilePath: process.cwd(), sourceFilePath: localDestinationFolder });
            }
            else {
                await fileAdapter.copyFilesIfNotExists({ destinationFilePath: process.cwd(), sourceFilePath: localDestinationFolder });
            }
            await fileAdapter.removeFolder({ folderPath: localDestinationFolder });
        }
        catch (error) {
            const errorMessageOrObject = error.message ?? error;
            logger().error('Some file already exist, you need to compare folder manually', errorMessageOrObject);
        }
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXVzZS1jYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2J1c2luZXNzL3VzZS1jYXNlL2FjdGlvbi11c2UtY2FzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQTtBQUNuRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQTtBQUNyRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQTtBQUM1RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ3pDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUV6QyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUc7SUFDNUIsS0FBSyxFQUFFLEtBQUssSUFBbUIsRUFBRTtRQUNoQyxNQUFNLElBQUkscUJBQXFCLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUM1QyxNQUFNLEVBQ0wsUUFBUSxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQUUsYUFBYSxFQUFFLEdBQ3RFLEdBQUcsTUFBTSxFQUFFLENBQUE7UUFFWixNQUFNLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUU3RCxJQUFJLGlCQUFpQixFQUFFLENBQUM7WUFDdkIsTUFBTSxJQUFJLHFCQUFxQixFQUFFLENBQUMsc0JBQXNCLENBQUMsRUFBRSxjQUFjLEVBQUUsc0JBQXNCLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFBO1FBQ3hILENBQUM7UUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFBO1FBRXJDLE1BQU0sV0FBVyxHQUFHLE1BQU0sV0FBVyxDQUFDLHlCQUF5QixDQUFDLEVBQUUsVUFBVSxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQTtRQUN2RyxNQUFNLEtBQUssR0FBRyxNQUFNLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO1FBQ2hGLE1BQU0sZUFBZSxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQTtRQUMvQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2hCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUN0QixPQUFPLGVBQWUsQ0FBQywrQkFBK0IsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFDckUsQ0FBQyxDQUFDLENBQ0YsQ0FBQTtRQUVELElBQUksQ0FBQztZQUNKLHNDQUFzQztZQUN0QyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUN0QyxNQUFNLFdBQVcsQ0FBQyxlQUFlLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsY0FBYyxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQTtZQUNsSCxDQUFDO2lCQUFNLENBQUM7Z0JBQ1AsTUFBTSxXQUFXLENBQUMsb0JBQW9CLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsY0FBYyxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQTtZQUN2SCxDQUFDO1lBQ0QsTUFBTSxXQUFXLENBQUMsWUFBWSxDQUFDLEVBQUUsVUFBVSxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQTtRQUN2RSxDQUFDO1FBQUMsT0FBTyxLQUFjLEVBQUUsQ0FBQztZQUN6QixNQUFNLG9CQUFvQixHQUFJLEtBQThCLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQTtZQUU3RSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsOERBQThELEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtRQUNyRyxDQUFDO0lBQ0YsQ0FBQztDQUNELENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmZXRjaFRlbXBsYXRlU2VydmljZSB9IGZyb20gJyNzcmMvYnVzaW5lc3Mvc2VydmljZS9mZXRjaC10ZW1wbGF0ZS9zZXJ2aWNlJ1xuaW1wb3J0IHsgVGVtcGxhdGVGb2xkZXJTZXJ2aWNlIH0gZnJvbSAnI3NyYy9idXNpbmVzcy9zZXJ2aWNlL3RlbXBsYXRlLWZvbGRlci1zZXJ2aWNlJ1xuaW1wb3J0IHsgVGVtcGxhdGluZ1NlcnZpY2UgfSBmcm9tICcjc3JjL2J1c2luZXNzL3NlcnZpY2UvdGVtcGxhdGluZy1zZXJ2aWNlJ1xuaW1wb3J0IHsgRmlsZUFkYXB0ZXIgfSBmcm9tICcjc3JjL2xpYi9maWxlLWFkYXB0ZXInXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcjc3JjL3V0aWwvY29uZmlnJ1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnI3NyYy91dGlsL2xvZ2dlcidcblxuZXhwb3J0IGNvbnN0IGFjdGlvblVzZUNhc2UgPSB7XG5cdGNsb25lOiBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdFx0YXdhaXQgbmV3IFRlbXBsYXRlRm9sZGVyU2VydmljZSgpLmNsZWFuQWxsKClcblx0XHRjb25zdCB7XG5cdFx0XHR0ZW1wbGF0ZTogeyBzdWJGb2xkZXJMb2NhdGlvbiwgbG9jYWxEZXN0aW5hdGlvbkZvbGRlciwgZmV0Y2hTdHJhdGVneSB9LFxuXHRcdH0gPSBjb25maWcoKVxuXG5cdFx0YXdhaXQgZmV0Y2hUZW1wbGF0ZVNlcnZpY2UuZ2V0U3RyYXRlZ3koZmV0Y2hTdHJhdGVneSkuZmV0Y2goKVxuXG5cdFx0aWYgKHN1YkZvbGRlckxvY2F0aW9uKSB7XG5cdFx0XHRhd2FpdCBuZXcgVGVtcGxhdGVGb2xkZXJTZXJ2aWNlKCkucHJvbW90ZVN1YmZvbGRlclRvUm9vdCh7IHJvb3RGb2xkZXJQYXRoOiBsb2NhbERlc3RpbmF0aW9uRm9sZGVyLCBzdWJGb2xkZXJMb2NhdGlvbiB9KVxuXHRcdH1cblxuXHRcdGNvbnN0IGZpbGVBZGFwdGVyID0gbmV3IEZpbGVBZGFwdGVyKClcblxuXHRcdGNvbnN0IGNvbnRlbnRMaXN0ID0gYXdhaXQgZmlsZUFkYXB0ZXIuZ2V0UmVjdXJyaW5nRm9sZGVyQ29udGVudCh7IGZvbGRlclBhdGg6IGxvY2FsRGVzdGluYXRpb25Gb2xkZXIgfSlcblx0XHRjb25zdCBmaWxlcyA9IGF3YWl0IGZpbGVBZGFwdGVyLmZpbHRlckZpbGVzKHsgZmlsZUZvbGRlclBhdGhMaXN0OiBjb250ZW50TGlzdCB9KVxuXHRcdGNvbnN0IHRlbXBsYXRlU2VydmljZSA9IG5ldyBUZW1wbGF0aW5nU2VydmljZSgpXG5cdFx0YXdhaXQgUHJvbWlzZS5hbGwoXG5cdFx0XHRmaWxlcy5tYXAoKGZpbGVQYXRoKSA9PiB7XG5cdFx0XHRcdHJldHVybiB0ZW1wbGF0ZVNlcnZpY2UucmVwbGFjZUZpbGVXaXRoUmVuZGVyZWRUZW1wbGF0ZSh7IGZpbGVQYXRoIH0pXG5cdFx0XHR9KVxuXHRcdClcblxuXHRcdHRyeSB7XG5cdFx0XHQvLyBUT0RPIGNyZWF0ZSBhIHN0cmF0ZWd5IGZvciBvdmVycmlkZVxuXHRcdFx0aWYgKCFjb25maWcoKS50ZW1wbGF0ZS5mb3JjZU92ZXJyaWRlKSB7XG5cdFx0XHRcdGF3YWl0IGZpbGVBZGFwdGVyLmNvcHlBbmRPdmVycmlkZSh7IGRlc3RpbmF0aW9uRmlsZVBhdGg6IHByb2Nlc3MuY3dkKCksIHNvdXJjZUZpbGVQYXRoOiBsb2NhbERlc3RpbmF0aW9uRm9sZGVyIH0pXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhd2FpdCBmaWxlQWRhcHRlci5jb3B5RmlsZXNJZk5vdEV4aXN0cyh7IGRlc3RpbmF0aW9uRmlsZVBhdGg6IHByb2Nlc3MuY3dkKCksIHNvdXJjZUZpbGVQYXRoOiBsb2NhbERlc3RpbmF0aW9uRm9sZGVyIH0pXG5cdFx0XHR9XG5cdFx0XHRhd2FpdCBmaWxlQWRhcHRlci5yZW1vdmVGb2xkZXIoeyBmb2xkZXJQYXRoOiBsb2NhbERlc3RpbmF0aW9uRm9sZGVyIH0pXG5cdFx0fSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcblx0XHRcdGNvbnN0IGVycm9yTWVzc2FnZU9yT2JqZWN0ID0gKGVycm9yIGFzIHsgbWVzc2FnZT86IHN0cmluZyB9KS5tZXNzYWdlID8/IGVycm9yXG5cblx0XHRcdGxvZ2dlcigpLmVycm9yKCdTb21lIGZpbGUgYWxyZWFkeSBleGlzdCwgeW91IG5lZWQgdG8gY29tcGFyZSBmb2xkZXIgbWFudWFsbHknLCBlcnJvck1lc3NhZ2VPck9iamVjdClcblx0XHR9XG5cdH0sXG59XG4iXX0=