import path from 'path';
import { fileService } from '#src/service/file-service';
import { GitService } from '#src/service/git-service';
import { tempFolderService } from '#src/service/temp-folder-service';
import { templateService } from '#src/service/template-service';
import { config } from '#src/util/config';
export const gitUseCase = {
    cleanAndGetNewCopyOfTemplateRepo: async () => {
        await tempFolderService.cleanAll();
        await new GitService().downloadZipToTempFolder();
    },
    copyFilesFromBaseIfTheyDontExist: async () => {
        await fileService.copyFilesIfNotExists(config().tempFolderPath, process.cwd());
        await fileService.removeFolder(config().tempFolderPath);
    },
    extractAndRemoveZipFileAndPrepareTempFolder: async () => {
        const { templateZipName, tempFolderPath } = config();
        await fileService.unzip(path.resolve(tempFolderPath, `./${String(templateZipName)}`), config().tempFolderPath);
        await fileService.removeFile(path.resolve(tempFolderPath, `./${String(templateZipName)}`));
        await tempFolderService.flattenFolderByOneLevelAndRemoveIgnored();
    },
    renderAllTemplateWithValuesFromConfig: async () => {
        const contentList = await fileService.getRecurringFolderContent(config().tempFolderPath);
        const files = await fileService.filterFiles(contentList);
        await Promise.all(files.map(templateService.renderAndOverrideFile));
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0LXVzZS1jYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZS1jYXNlL2dpdC11c2UtY2FzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUE7QUFFdkIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUNyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQTtBQUNwRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFDL0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRXpDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRztJQUN6QixnQ0FBZ0MsRUFBRSxLQUFLLElBQW1CLEVBQUU7UUFDM0QsTUFBTSxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNsQyxNQUFNLElBQUksVUFBVSxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQTtJQUNqRCxDQUFDO0lBQ0QsZ0NBQWdDLEVBQUUsS0FBSyxJQUFtQixFQUFFO1FBQzNELE1BQU0sV0FBVyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUM5RSxNQUFNLFdBQVcsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDeEQsQ0FBQztJQUNELDJDQUEyQyxFQUFFLEtBQUssSUFBbUIsRUFBRTtRQUN0RSxNQUFNLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFBO1FBQ3BELE1BQU0sV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxLQUFLLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDOUcsTUFBTSxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEtBQUssTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzFGLE1BQU0saUJBQWlCLENBQUMsdUNBQXVDLEVBQUUsQ0FBQTtJQUNsRSxDQUFDO0lBQ0QscUNBQXFDLEVBQUUsS0FBSyxJQUFtQixFQUFFO1FBQ2hFLE1BQU0sV0FBVyxHQUFHLE1BQU0sV0FBVyxDQUFDLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ3hGLE1BQU0sS0FBSyxHQUFHLE1BQU0sV0FBVyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUN4RCxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFBO0lBQ3BFLENBQUM7Q0FDRCxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcblxuaW1wb3J0IHsgZmlsZVNlcnZpY2UgfSBmcm9tICcjc3JjL3NlcnZpY2UvZmlsZS1zZXJ2aWNlJ1xuaW1wb3J0IHsgR2l0U2VydmljZSB9IGZyb20gJyNzcmMvc2VydmljZS9naXQtc2VydmljZSdcbmltcG9ydCB7IHRlbXBGb2xkZXJTZXJ2aWNlIH0gZnJvbSAnI3NyYy9zZXJ2aWNlL3RlbXAtZm9sZGVyLXNlcnZpY2UnXG5pbXBvcnQgeyB0ZW1wbGF0ZVNlcnZpY2UgfSBmcm9tICcjc3JjL3NlcnZpY2UvdGVtcGxhdGUtc2VydmljZSdcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJyNzcmMvdXRpbC9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBnaXRVc2VDYXNlID0ge1xuXHRjbGVhbkFuZEdldE5ld0NvcHlPZlRlbXBsYXRlUmVwbzogYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuXHRcdGF3YWl0IHRlbXBGb2xkZXJTZXJ2aWNlLmNsZWFuQWxsKClcblx0XHRhd2FpdCBuZXcgR2l0U2VydmljZSgpLmRvd25sb2FkWmlwVG9UZW1wRm9sZGVyKClcblx0fSxcblx0Y29weUZpbGVzRnJvbUJhc2VJZlRoZXlEb250RXhpc3Q6IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0XHRhd2FpdCBmaWxlU2VydmljZS5jb3B5RmlsZXNJZk5vdEV4aXN0cyhjb25maWcoKS50ZW1wRm9sZGVyUGF0aCwgcHJvY2Vzcy5jd2QoKSlcblx0XHRhd2FpdCBmaWxlU2VydmljZS5yZW1vdmVGb2xkZXIoY29uZmlnKCkudGVtcEZvbGRlclBhdGgpXG5cdH0sXG5cdGV4dHJhY3RBbmRSZW1vdmVaaXBGaWxlQW5kUHJlcGFyZVRlbXBGb2xkZXI6IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0XHRjb25zdCB7IHRlbXBsYXRlWmlwTmFtZSwgdGVtcEZvbGRlclBhdGggfSA9IGNvbmZpZygpXG5cdFx0YXdhaXQgZmlsZVNlcnZpY2UudW56aXAocGF0aC5yZXNvbHZlKHRlbXBGb2xkZXJQYXRoLCBgLi8ke1N0cmluZyh0ZW1wbGF0ZVppcE5hbWUpfWApLCBjb25maWcoKS50ZW1wRm9sZGVyUGF0aClcblx0XHRhd2FpdCBmaWxlU2VydmljZS5yZW1vdmVGaWxlKHBhdGgucmVzb2x2ZSh0ZW1wRm9sZGVyUGF0aCwgYC4vJHtTdHJpbmcodGVtcGxhdGVaaXBOYW1lKX1gKSlcblx0XHRhd2FpdCB0ZW1wRm9sZGVyU2VydmljZS5mbGF0dGVuRm9sZGVyQnlPbmVMZXZlbEFuZFJlbW92ZUlnbm9yZWQoKVxuXHR9LFxuXHRyZW5kZXJBbGxUZW1wbGF0ZVdpdGhWYWx1ZXNGcm9tQ29uZmlnOiBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdFx0Y29uc3QgY29udGVudExpc3QgPSBhd2FpdCBmaWxlU2VydmljZS5nZXRSZWN1cnJpbmdGb2xkZXJDb250ZW50KGNvbmZpZygpLnRlbXBGb2xkZXJQYXRoKVxuXHRcdGNvbnN0IGZpbGVzID0gYXdhaXQgZmlsZVNlcnZpY2UuZmlsdGVyRmlsZXMoY29udGVudExpc3QpXG5cdFx0YXdhaXQgUHJvbWlzZS5hbGwoZmlsZXMubWFwKHRlbXBsYXRlU2VydmljZS5yZW5kZXJBbmRPdmVycmlkZUZpbGUpKVxuXHR9LFxufVxuIl19