"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gitUseCase = void 0;
const file_service_1 = require("src/service/file-service");
const git_service_1 = require("src/service/git-service");
const temp_folder_service_1 = require("src/service/temp-folder-service");
const template_service_1 = require("src/service/template-service");
const constant_1 = require("src/util/constant");
exports.gitUseCase = {
    cleanAndGetNewCopyOfTemplateRepo: async () => {
        await temp_folder_service_1.tempFolderService.cleanAll();
        await git_service_1.gitService.downloadZipToTempFolder();
    },
    extractAndRemoveZipFileAndPrepareTempFolder: async () => {
        await file_service_1.fileService.unzip(constant_1.constant.templateZipPath, constant_1.constant.tempFolderPath);
        await file_service_1.fileService.removeFile(constant_1.constant.templateZipPath);
        await temp_folder_service_1.tempFolderService.flattenFolderByOneLevelAndRemoveIgnored();
    },
    renderAllTemplateWithValuesFromConfig: async () => {
        const contentList = await file_service_1.fileService.getRecurringFolderContent(constant_1.constant.tempFolderPath);
        const files = await file_service_1.fileService.filterFiles(contentList);
        await Promise.all(files.map(template_service_1.templateService.renderAndOverrideFile));
    },
    copyFilesFromBaseIfTheyDontExist: async () => {
        await file_service_1.fileService.copyFilesIfNotExists(constant_1.constant.tempFolderPath, process.cwd());
        await file_service_1.fileService.removeFolder(constant_1.constant.tempFolderPath);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0LXVzZS1jYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZS1jYXNlL2dpdC11c2UtY2FzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyREFBc0Q7QUFDdEQseURBQW9EO0FBQ3BELHlFQUFtRTtBQUNuRSxtRUFBOEQ7QUFDOUQsZ0RBQTRDO0FBRS9CLFFBQUEsVUFBVSxHQUFHO0lBQ3hCLGdDQUFnQyxFQUFFLEtBQUssSUFBbUIsRUFBRTtRQUMxRCxNQUFNLHVDQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQ2xDLE1BQU0sd0JBQVUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFBO0lBQzVDLENBQUM7SUFDRCwyQ0FBMkMsRUFBRSxLQUFLLElBQW1CLEVBQUU7UUFDckUsTUFBTSwwQkFBVyxDQUFDLEtBQUssQ0FBQyxtQkFBUSxDQUFDLGVBQWUsRUFBRSxtQkFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQzFFLE1BQU0sMEJBQVcsQ0FBQyxVQUFVLENBQUMsbUJBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQTtRQUN0RCxNQUFNLHVDQUFpQixDQUFDLHVDQUF1QyxFQUFFLENBQUE7SUFDbkUsQ0FBQztJQUNELHFDQUFxQyxFQUFFLEtBQUssSUFBbUIsRUFBRTtRQUMvRCxNQUFNLFdBQVcsR0FBRyxNQUFNLDBCQUFXLENBQUMseUJBQXlCLENBQUMsbUJBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUN4RixNQUFNLEtBQUssR0FBRyxNQUFNLDBCQUFXLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3hELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGtDQUFlLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFBO0lBQ3JFLENBQUM7SUFDRCxnQ0FBZ0MsRUFBRSxLQUFLLElBQW1CLEVBQUU7UUFDMUQsTUFBTSwwQkFBVyxDQUFDLG9CQUFvQixDQUFFLG1CQUFRLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQy9FLE1BQU0sMEJBQVcsQ0FBQyxZQUFZLENBQUMsbUJBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUN6RCxDQUFDO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbGVTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvZmlsZS1zZXJ2aWNlJ1xuaW1wb3J0IHsgZ2l0U2VydmljZSB9IGZyb20gJ3NyYy9zZXJ2aWNlL2dpdC1zZXJ2aWNlJ1xuaW1wb3J0IHsgdGVtcEZvbGRlclNlcnZpY2UgfSBmcm9tICdzcmMvc2VydmljZS90ZW1wLWZvbGRlci1zZXJ2aWNlJ1xuaW1wb3J0IHsgdGVtcGxhdGVTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2UvdGVtcGxhdGUtc2VydmljZSdcbmltcG9ydCB7IGNvbnN0YW50IH0gZnJvbSAnc3JjL3V0aWwvY29uc3RhbnQnXG5cbmV4cG9ydCBjb25zdCBnaXRVc2VDYXNlID0ge1xuICBjbGVhbkFuZEdldE5ld0NvcHlPZlRlbXBsYXRlUmVwbzogYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGF3YWl0IHRlbXBGb2xkZXJTZXJ2aWNlLmNsZWFuQWxsKClcbiAgICBhd2FpdCBnaXRTZXJ2aWNlLmRvd25sb2FkWmlwVG9UZW1wRm9sZGVyKClcbiAgfSxcbiAgZXh0cmFjdEFuZFJlbW92ZVppcEZpbGVBbmRQcmVwYXJlVGVtcEZvbGRlcjogYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGF3YWl0IGZpbGVTZXJ2aWNlLnVuemlwKGNvbnN0YW50LnRlbXBsYXRlWmlwUGF0aCwgY29uc3RhbnQudGVtcEZvbGRlclBhdGgpXG4gICAgYXdhaXQgZmlsZVNlcnZpY2UucmVtb3ZlRmlsZShjb25zdGFudC50ZW1wbGF0ZVppcFBhdGgpXG4gICAgYXdhaXQgdGVtcEZvbGRlclNlcnZpY2UuZmxhdHRlbkZvbGRlckJ5T25lTGV2ZWxBbmRSZW1vdmVJZ25vcmVkKClcbiAgfSxcbiAgcmVuZGVyQWxsVGVtcGxhdGVXaXRoVmFsdWVzRnJvbUNvbmZpZzogYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRMaXN0ID0gYXdhaXQgZmlsZVNlcnZpY2UuZ2V0UmVjdXJyaW5nRm9sZGVyQ29udGVudChjb25zdGFudC50ZW1wRm9sZGVyUGF0aClcbiAgICBjb25zdCBmaWxlcyA9IGF3YWl0IGZpbGVTZXJ2aWNlLmZpbHRlckZpbGVzKGNvbnRlbnRMaXN0KVxuICAgIGF3YWl0IFByb21pc2UuYWxsKGZpbGVzLm1hcCh0ZW1wbGF0ZVNlcnZpY2UucmVuZGVyQW5kT3ZlcnJpZGVGaWxlKSlcbiAgfSxcbiAgY29weUZpbGVzRnJvbUJhc2VJZlRoZXlEb250RXhpc3Q6IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBhd2FpdCBmaWxlU2VydmljZS5jb3B5RmlsZXNJZk5vdEV4aXN0cyggY29uc3RhbnQudGVtcEZvbGRlclBhdGgsIHByb2Nlc3MuY3dkKCkpXG4gICAgYXdhaXQgZmlsZVNlcnZpY2UucmVtb3ZlRm9sZGVyKGNvbnN0YW50LnRlbXBGb2xkZXJQYXRoKVxuICB9XG59XG4iXX0=